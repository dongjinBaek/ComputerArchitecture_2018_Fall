#######################################################################
# Test for copying block of size 0;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $0, %rdx		# src and dst have 0 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# 2017-12735 Baek Dong Jin
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
	# Loop header
	xorq %rax, %rax # count = 0;

Mod2:
	irmovq $1, %r9
	andq %rdx, %r9 # len is Even ?
	je Mod4_1

	mrmovq (%rdi), %r10 # read val from src
	iaddq $8, %rdi
	rmmovq %r10, (%rsi) # store it to dst
	iaddq $8, %rsi

	iaddq $-1, %rdx
	andq %r10, %r10
	jle Mod4_1
	iaddq $1, %rax

Mod4_1:
	irmovq $2, %r9
	andq %rdx, %r9 # len is 0, 1 mod 4 ?
	je Mod8_1

	mrmovq (%rdi), %r10 # read val from src
	mrmovq $8(%rdi), %r9 # read val from src
	rmmovq %r10, (%rsi) # store it to dst
	rmmovq %r9, $8(%rsi) # store it to dst

	andq %r10, %r10
	jle Mod4_2
	iaddq $1, %rax
Mod4_2:
	iaddq $16, %rdi
	iaddq $16, %rsi
	iaddq $-2, %rdx
	andq %r9, %r9
	jle Mod8_1
	iaddq $1, %rax

Mod8_1:
	irmovq $4, %r9
	andq %rdx, %r9 # len is 0, 1, 2, 3 mod 8
	je Test

	mrmovq (%rdi), %r10
	mrmovq $8(%rdi), %r9
	rmmovq %r10, (%rsi)
	rmmovq %r9, $8(%rsi)

	andq %r10, %r10
	jle Mod8_2
	iaddq $1, %rax
Mod8_2:
	andq %r9, %r9
	jle Mod8_3
	iaddq $1, %rax
Mod8_3:
	mrmovq $16(%rdi), %r10
	mrmovq $24(%rdi), %r9
	rmmovq %r10, $16(%rsi)
	rmmovq %r9, $24(%rsi)

	andq %r10, %r10
	jle Mod8_4
	iaddq $1, %rax
Mod8_4:
	iaddq $32, %rdi
	iaddq $32, %rsi
	iaddq $-4, %rdx
	andq %r9, %r9
	jle Test
	iaddq $1, %rax
	jmp Test

L1:
	mrmovq (%rdi), %r10 # read val from src
	mrmovq $8(%rdi), %r9 # read val from src
	rmmovq %r10, (%rsi) # store it to dst
	rmmovq %r9, $8(%rsi) # store it to dst

	andq %r10, %r10
	jle L2 
	iaddq $1, %rax
L2:
	andq %r9, %r9
	jle L3
	iaddq $1, %rax
L3:
	mrmovq $16(%rdi), %r10 # read val from src
	mrmovq $24(%rdi), %r9 # read val from src
	rmmovq %r10, $16(%rsi) # store it to dst
	rmmovq %r9, $24(%rsi) # store it to dst

	andq %r10, %r10
	jle L4 
	iaddq $1, %rax
L4:
	andq %r9, %r9
	jle L5
	iaddq $1, %rax
L5:
	mrmovq $32(%rdi), %r10 # read val from src
	mrmovq $40(%rdi), %r9 # read val from src
	rmmovq %r10, $32(%rsi) # store it to dst
	rmmovq %r9, $40(%rsi) # store it to dst

	andq %r10, %r10
	jle L6 
	iaddq $1, %rax
L6:
	andq %r9, %r9
	jle L7
	iaddq $1, %rax
L7:
	mrmovq $48(%rdi), %r10 # read val from src
	mrmovq $56(%rdi), %r9 # read val from src
	rmmovq %r10, $48(%rsi) # store it to dst
	rmmovq %r9, $56(%rsi) # store it to dst

	andq %r10, %r10
	jle L8 
	iaddq $1, %rax
L8:
	iaddq $64, %rdi
	iaddq $64, %rsi
	andq %r9, %r9
	jle Test
	iaddq $1, %rax

Test:
	iaddq $-8, %rdx # (len-8) >= 0 ?
	jge L1
#################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 0.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $0,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $0,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
