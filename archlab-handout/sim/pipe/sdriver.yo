                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f44004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f69803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f76803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # 2017-12735 Baek Dong Jin
                            | #
                            | # Describe how and why you modified the baseline code.
                            | # 1. irmovq + addq --> iaddq
                            | # 2. handle load/use hazard by inserting instruction between copying data
                            | # 3. loop unrolling with k = 8
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax, %rax
0x034: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x03e: 72b601000000000000   | 	jl Has4_Small
                            | 
                            | 
0x047:                      | L1:
0x047: 50a70000000000000000 | 	mrmovq (%rdi), %r10 # read val from src
0x051: 50970800000000000000 | 	mrmovq $8(%rdi), %r9 # read val from src
0x05b: 40a60000000000000000 | 	rmmovq %r10, (%rsi) # store it to dst
0x065: 40960800000000000000 | 	rmmovq %r9, $8(%rsi) # store it to dst
                            | 
0x06f: 62aa                 | 	andq %r10, %r10
0x071: 718400000000000000   | 	jle L2 
0x07a: c0f00100000000000000 | 	iaddq $1, %rax
0x084:                      | L2:
0x084: 6299                 | 	andq %r9, %r9
0x086: 719900000000000000   | 	jle L3
0x08f: c0f00100000000000000 | 	iaddq $1, %rax
0x099:                      | L3:
0x099: 50a71000000000000000 | 	mrmovq $16(%rdi), %r10 # read val from src
0x0a3: 50971800000000000000 | 	mrmovq $24(%rdi), %r9 # read val from src
0x0ad: 40a61000000000000000 | 	rmmovq %r10, $16(%rsi) # store it to dst
0x0b7: 40961800000000000000 | 	rmmovq %r9, $24(%rsi) # store it to dst
                            | 
0x0c1: 62aa                 | 	andq %r10, %r10
0x0c3: 71d600000000000000   | 	jle L4 
0x0cc: c0f00100000000000000 | 	iaddq $1, %rax
0x0d6:                      | L4:
0x0d6: 6299                 | 	andq %r9, %r9
0x0d8: 71eb00000000000000   | 	jle L5
0x0e1: c0f00100000000000000 | 	iaddq $1, %rax
0x0eb:                      | L5:
0x0eb: 50a72000000000000000 | 	mrmovq $32(%rdi), %r10 # read val from src
0x0f5: 50972800000000000000 | 	mrmovq $40(%rdi), %r9 # read val from src
0x0ff: 40a62000000000000000 | 	rmmovq %r10, $32(%rsi) # store it to dst
0x109: 40962800000000000000 | 	rmmovq %r9, $40(%rsi) # store it to dst
                            | 
0x113: 62aa                 | 	andq %r10, %r10
0x115: 712801000000000000   | 	jle L6 
0x11e: c0f00100000000000000 | 	iaddq $1, %rax
0x128:                      | L6:
0x128: 6299                 | 	andq %r9, %r9
0x12a: 713d01000000000000   | 	jle L7
0x133: c0f00100000000000000 | 	iaddq $1, %rax
0x13d:                      | L7:
0x13d: 50a73000000000000000 | 	mrmovq $48(%rdi), %r10 # read val from src
0x147: 50973800000000000000 | 	mrmovq $56(%rdi), %r9 # read val from src
0x151: 40a63000000000000000 | 	rmmovq %r10, $48(%rsi) # store it to dst
0x15b: 40963800000000000000 | 	rmmovq %r9, $56(%rsi) # store it to dst
                            | 
0x165: 62aa                 | 	andq %r10, %r10
0x167: 717a01000000000000   | 	jle L8 
0x170: c0f00100000000000000 | 	iaddq $1, %rax
0x17a:                      | L8:
0x17a: c0f74000000000000000 | 	iaddq $64, %rdi
0x184: c0f64000000000000000 | 	iaddq $64, %rsi
0x18e: 6299                 | 	andq %r9, %r9
0x190: 71a301000000000000   | 	jle Test 
0x199: c0f00100000000000000 | 	iaddq $1, %rax
0x1a3:                      | Test:
0x1a3: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx # (len-8) >= 0 ?
0x1ad: 754700000000000000   | 	jge L1
                            | 
0x1b6:                      | Has4_Small:
0x1b6: c0f20800000000000000 | 	iaddq $8, %rdx
                            | 
0x1c0:                      | Has4:
0x1c0: c0f2fcffffffffffffff | 	iaddq $-4, %rdx
0x1ca: 729402000000000000   | 	jl Has2_Small
                            | 
0x1d3: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x1dd: 50970800000000000000 | 	mrmovq $8(%rdi), %r9
0x1e7: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x1f1: 40960800000000000000 | 	rmmovq %r9, $8(%rsi)
                            | 
0x1fb: 62aa                 | 	andq %r10, %r10
0x1fd: 711002000000000000   | 	jle S1
0x206: c0f00100000000000000 | 	iaddq $1, %rax
0x210:                      | S1:
0x210: 6299                 | 	andq %r9, %r9
0x212: 712502000000000000   | 	jle S2
0x21b: c0f00100000000000000 | 	iaddq $1, %rax
0x225:                      | S2:
0x225: 50a71000000000000000 | 	mrmovq $16(%rdi), %r10
0x22f: 50971800000000000000 | 	mrmovq $24(%rdi), %r9
0x239: 40a61000000000000000 | 	rmmovq %r10, $16(%rsi)
0x243: 40961800000000000000 | 	rmmovq %r9, $24(%rsi)
                            | 
0x24d: 62aa                 | 	andq %r10, %r10
0x24f: 716202000000000000   | 	jle S3
0x258: c0f00100000000000000 | 	iaddq $1, %rax
0x262:                      | S3:
0x262: c0f72000000000000000 | 	iaddq $32, %rdi
0x26c: c0f62000000000000000 | 	iaddq $32, %rsi
0x276: 6299                 | 	andq %r9, %r9
0x278: 719e02000000000000   | 	jle Has2
0x281: c0f00100000000000000 | 	iaddq $1, %rax
0x28b: 709e02000000000000   | 	jmp Has2
                            | 
0x294:                      | Has2_Small:
0x294: c0f20400000000000000 | 	iaddq $4, %rdx
0x29e:                      | Has2:
0x29e: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x2a8: 722003000000000000   | 	jl Has1_Small
                            | 
0x2b1: 50a70000000000000000 | 	mrmovq (%rdi), %r10 # read val from src
0x2bb: 50970800000000000000 | 	mrmovq $8(%rdi), %r9 # read val from src
0x2c5: 40a60000000000000000 | 	rmmovq %r10, (%rsi) # store it to dst
0x2cf: 40960800000000000000 | 	rmmovq %r9, $8(%rsi) # store it to dst
                            | 
0x2d9: 62aa                 | 	andq %r10, %r10
0x2db: 71ee02000000000000   | 	jle S4
0x2e4: c0f00100000000000000 | 	iaddq $1, %rax
0x2ee:                      | S4:
0x2ee: c0f71000000000000000 | 	iaddq $16, %rdi
0x2f8: c0f61000000000000000 | 	iaddq $16, %rsi
                            | 
0x302: 6299                 | 	andq %r9, %r9
0x304: 712a03000000000000   | 	jle Has1
0x30d: c0f00100000000000000 | 	iaddq $1, %rax
0x317: 702a03000000000000   | 	jmp Has1
                            | 	
0x320:                      | Has1_Small:
0x320: c0f20200000000000000 | 	iaddq $2, %rdx
                            | 
0x32a:                      | Has1:
0x32a: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x334: 726603000000000000   | 	jl Done
                            | 
0x33d: 50a70000000000000000 | 	mrmovq (%rdi), %r10 # read val from src
0x347: 40a60000000000000000 | 	rmmovq %r10, (%rsi) # store it to dst
                            | 
0x351: 62aa                 | 	andq %r10, %r10
0x353: 716603000000000000   | 	jle Done
0x35c: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
                            | 
                            | 
                            | #################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x366:                      | Done:
0x366: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x367:                      | End:
                            | #/* $end ncopy-ys */
0x367:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x368:                      | 	.align 8
0x368:                      | src:
0x368: ffffffffffffffff     | 	.quad -1
0x370: 0200000000000000     | 	.quad 2
0x378: fdffffffffffffff     | 	.quad -3
0x380: 0400000000000000     | 	.quad 4
0x388: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x390:                      | 	.align 16
0x390:                      | Predest:
0x390: fadebc0000000000     | 	.quad 0xbcdefa
0x398:                      | dest:
0x398: abefcd0000000000     | 	.quad 0xcdefab
0x3a0: abefcd0000000000     | 	.quad 0xcdefab
0x3a8: abefcd0000000000     | 	.quad 0xcdefab
0x3b0: abefcd0000000000     | 	.quad 0xcdefab
0x3b8:                      | Postdest:
0x3b8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x3c0:                      | .align 8
                            | # Run time stack
0x3c0: 0000000000000000     | 	.quad 0
0x3c8: 0000000000000000     | 	.quad 0
0x3d0: 0000000000000000     | 	.quad 0
0x3d8: 0000000000000000     | 	.quad 0
0x3e0: 0000000000000000     | 	.quad 0
0x3e8: 0000000000000000     | 	.quad 0
0x3f0: 0000000000000000     | 	.quad 0
0x3f8: 0000000000000000     | 	.quad 0
0x400: 0000000000000000     | 	.quad 0
0x408: 0000000000000000     | 	.quad 0
0x410: 0000000000000000     | 	.quad 0
0x418: 0000000000000000     | 	.quad 0
0x420: 0000000000000000     | 	.quad 0
0x428: 0000000000000000     | 	.quad 0
0x430: 0000000000000000     | 	.quad 0
0x438: 0000000000000000     | 	.quad 0
                            | 
0x440:                      | Stack:
