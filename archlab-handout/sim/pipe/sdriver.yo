                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4d002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f62802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7f801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # 2017-12735 Baek Dong Jin
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax, %rax # count = 0;
                            | 
0x034:                      | Mod2:
0x034: 30f90100000000000000 | 	irmovq $1, %r9
0x03e: 6229                 | 	andq %rdx, %r9 # len is Even ?
0x040: 739900000000000000   | 	je Mod4
                            | 
0x049: 50a70000000000000000 | 	mrmovq (%rdi), %r10 # read val from src
0x053: c0f70800000000000000 | 	iaddq $8, %rdi
0x05d: 40a60000000000000000 | 	rmmovq %r10, (%rsi) # store it to dst
0x067: c0f60800000000000000 | 	iaddq $8, %rsi
                            | 
0x071: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x07b: 62aa                 | 	andq %r10, %r10
0x07d: 719900000000000000   | 	jle Mod4
0x086: c0f00100000000000000 | 	iaddq $1, %rax
0x090: 709900000000000000   | 	jmp Mod4
                            | 
0x099:                      | Mod4:
0x099: 30f90200000000000000 | 	irmovq $2, %r9
0x0a3: 6229                 | 	andq %rdx, %r9 # len is 0, 1 mod 4 ?
0x0a5: 73df01000000000000   | 	je Test
                            | 
0x0ae: 50a70000000000000000 | 	mrmovq (%rdi), %r10 # read val from src
0x0b8: c0f71000000000000000 | 	iaddq $16, %rdi
0x0c2: 40a60000000000000000 | 	rmmovq %r10, (%rsi) # store it to dst
                            | 
0x0cc: 62aa                 | 	andq %r10, %r10
0x0ce: 71e100000000000000   | 	jle Mod4Second
0x0d7: c0f00100000000000000 | 	iaddq $1, %rax
0x0e1:                      | Mod4Second:
0x0e1: 50a7f8ffffffffffffff | 	mrmovq $-8(%rdi), %r10 # read val from src
0x0eb: c0f61000000000000000 | 	iaddq $16, %rsi
0x0f5: 40a6f8ffffffffffffff | 	rmmovq %r10, $-8(%rsi) # store it to dst
                            | 
0x0ff: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x109: 62aa                 | 	andq %r10, %r10
0x10b: 71df01000000000000   | 	jle Test
0x114: c0f00100000000000000 | 	iaddq $1, %rax
0x11e: 70df01000000000000   | 	jmp Test
                            | 
0x127:                      | L1:
0x127: 50a70000000000000000 | 	mrmovq (%rdi), %r10 # read val from src
0x131: c0f72000000000000000 | 	iaddq $32, %rdi
0x13b: 40a60000000000000000 | 	rmmovq %r10, (%rsi) # store it to dst
                            | 
0x145: 62aa                 | 	andq %r10, %r10	
0x147: 715a01000000000000   | 	jle L2 
0x150: c0f00100000000000000 | 	iaddq $1, %rax
0x15a:                      | L2:
0x15a: 50a7e8ffffffffffffff | 	mrmovq $-24(%rdi), %r10 # read val from src
0x164: c0f62000000000000000 | 	iaddq $32, %rsi
0x16e: 40a6e8ffffffffffffff | 	rmmovq %r10, $-24(%rsi) # store it to dst
                            | 
0x178: 62aa                 | 	andq %r10, %r10
0x17a: 718d01000000000000   | 	jle L3
0x183: c0f00100000000000000 | 	iaddq $1, %rax
0x18d:                      | L3:
0x18d: 50a7f0ffffffffffffff | 	mrmovq $-16(%rdi), %r10 # read val from src
0x197: 5097f8ffffffffffffff | 	mrmovq $-8(%rdi), %r9 # read val from src
0x1a1: 40a6f0ffffffffffffff | 	rmmovq %r10, $-16(%rsi) # store it to dst
0x1ab: 4096f8ffffffffffffff | 	rmmovq %r9, $-8(%rsi) # store it to dst
                            | 
0x1b5: 62aa                 | 	andq %r10, %r10
0x1b7: 71ca01000000000000   | 	jle L4 
0x1c0: c0f00100000000000000 | 	iaddq $1, %rax
0x1ca:                      | L4:
0x1ca: 6299                 | 	andq %r9, %r9
0x1cc: 71df01000000000000   | 	jle Test
0x1d5: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x1df:                      | Test:
0x1df: c0f2fcffffffffffffff | 	iaddq $-4, %rdx # (len-4) >= 0 ?
0x1e9: 752701000000000000   | 	jge L1
                            | #################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1f2:                      | Done:
0x1f2: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1f3:                      | End:
                            | #/* $end ncopy-ys */
0x1f3:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1f8:                      | 	.align 8
0x1f8:                      | src:
0x1f8: 0100000000000000     | 	.quad 1
0x200: feffffffffffffff     | 	.quad -2
0x208: fdffffffffffffff     | 	.quad -3
0x210: 0400000000000000     | 	.quad 4
0x218: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x220:                      | 	.align 16
0x220:                      | Predest:
0x220: fadebc0000000000     | 	.quad 0xbcdefa
0x228:                      | dest:
0x228: abefcd0000000000     | 	.quad 0xcdefab
0x230: abefcd0000000000     | 	.quad 0xcdefab
0x238: abefcd0000000000     | 	.quad 0xcdefab
0x240: abefcd0000000000     | 	.quad 0xcdefab
0x248:                      | Postdest:
0x248: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x250:                      | .align 8
                            | # Run time stack
0x250: 0000000000000000     | 	.quad 0
0x258: 0000000000000000     | 	.quad 0
0x260: 0000000000000000     | 	.quad 0
0x268: 0000000000000000     | 	.quad 0
0x270: 0000000000000000     | 	.quad 0
0x278: 0000000000000000     | 	.quad 0
0x280: 0000000000000000     | 	.quad 0
0x288: 0000000000000000     | 	.quad 0
0x290: 0000000000000000     | 	.quad 0
0x298: 0000000000000000     | 	.quad 0
0x2a0: 0000000000000000     | 	.quad 0
0x2a8: 0000000000000000     | 	.quad 0
0x2b0: 0000000000000000     | 	.quad 0
0x2b8: 0000000000000000     | 	.quad 0
0x2c0: 0000000000000000     | 	.quad 0
0x2c8: 0000000000000000     | 	.quad 0
                            | 
0x2d0:                      | Stack:
