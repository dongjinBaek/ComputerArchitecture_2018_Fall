                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4f001000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f64801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f71801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # 2017-12735 Baek Dong Jin
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax, %rax # count = 0;
0x034: 30f90100000000000000 | 	irmovq $1, %r9
0x03e: 6229                 | 	andq %rdx, %r9 # len is Even ?
0x040: 73ff00000000000000   | 	je Test
                            | 
0x049:                      | Odd:
0x049: 50a70000000000000000 | 	mrmovq (%rdi), %r10 # read val from src
0x053: c0f70800000000000000 | 	iaddq $8, %rdi
0x05d: 40a60000000000000000 | 	rmmovq %r10, (%rsi) # store it to dst
0x067: c0f60800000000000000 | 	iaddq $8, %rsi
                            | 
0x071: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x07b: 62aa                 | 	andq %r10, %r10
0x07d: 71ff00000000000000   | 	jle Test
0x086: c0f00100000000000000 | 	iaddq $1, %rax
0x090: 70ff00000000000000   | 	jmp Test
0x099:                      | L1:
0x099: 50a70000000000000000 | 	mrmovq (%rdi), %r10 # read val from src
0x0a3: c0f61000000000000000 | 	iaddq $16, %rsi
0x0ad: 40a6f0ffffffffffffff | 	rmmovq %r10, $-16(%rsi) # store it to dst
                            | 
0x0b7: 62aa                 | 	andq %r10, %r10	
0x0b9: 71cc00000000000000   | 	jle L2 
0x0c2: c0f00100000000000000 | 	iaddq $1, %rax
0x0cc:                      | L2:
0x0cc: 50a70800000000000000 | 	mrmovq $8(%rdi), %r10 # read val from src
0x0d6: c0f71000000000000000 | 	iaddq $16, %rdi
0x0e0: 40a6f8ffffffffffffff | 	rmmovq %r10, $-8(%rsi) # store it to dst
                            | 
0x0ea: 62aa                 | 	andq %r10, %r10
0x0ec: 71ff00000000000000   | 	jle Test
0x0f5: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0ff:                      | Test:
0x0ff: c0f2feffffffffffffff | 	iaddq $-2, %rdx # (len-2) >= 0 ?
0x109: 759900000000000000   | 	jge L1
                            | #################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x112:                      | Done:
0x112: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x113:                      | End:
                            | #/* $end ncopy-ys */
0x113:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x118:                      | 	.align 8
0x118:                      | src:
0x118: 0100000000000000     | 	.quad 1
0x120: feffffffffffffff     | 	.quad -2
0x128: fdffffffffffffff     | 	.quad -3
0x130: 0400000000000000     | 	.quad 4
0x138: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x140:                      | 	.align 16
0x140:                      | Predest:
0x140: fadebc0000000000     | 	.quad 0xbcdefa
0x148:                      | dest:
0x148: abefcd0000000000     | 	.quad 0xcdefab
0x150: abefcd0000000000     | 	.quad 0xcdefab
0x158: abefcd0000000000     | 	.quad 0xcdefab
0x160: abefcd0000000000     | 	.quad 0xcdefab
0x168:                      | Postdest:
0x168: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x170:                      | .align 8
                            | # Run time stack
0x170: 0000000000000000     | 	.quad 0
0x178: 0000000000000000     | 	.quad 0
0x180: 0000000000000000     | 	.quad 0
0x188: 0000000000000000     | 	.quad 0
0x190: 0000000000000000     | 	.quad 0
0x198: 0000000000000000     | 	.quad 0
0x1a0: 0000000000000000     | 	.quad 0
0x1a8: 0000000000000000     | 	.quad 0
0x1b0: 0000000000000000     | 	.quad 0
0x1b8: 0000000000000000     | 	.quad 0
0x1c0: 0000000000000000     | 	.quad 0
0x1c8: 0000000000000000     | 	.quad 0
0x1d0: 0000000000000000     | 	.quad 0
0x1d8: 0000000000000000     | 	.quad 0
0x1e0: 0000000000000000     | 	.quad 0
0x1e8: 0000000000000000     | 	.quad 0
                            | 
0x1f0:                      | Stack:
