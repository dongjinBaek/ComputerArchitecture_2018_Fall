                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f46004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6b803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f78803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # 2017-12735 Baek Dong Jin
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax, %rax # count = 0;
0x034: 6222                 | 	andq %rdx, %rdx
0x036: 764000000000000000   | 	jg Mod2
0x03f: 90                   | 	ret
                            | 
0x040:                      | Mod2:
0x040: 30f90100000000000000 | 	irmovq $1, %r9
0x04a: 6229                 | 	andq %rdx, %r9 # len is Even ?
0x04c: 73a600000000000000   | 	je Mod4_1
                            | 
0x055: 50a70000000000000000 | 	mrmovq (%rdi), %r10 # read val from src
0x05f: c0f70800000000000000 | 	iaddq $8, %rdi
0x069: 40a60000000000000000 | 	rmmovq %r10, (%rsi) # store it to dst
0x073: c0f60800000000000000 | 	iaddq $8, %rsi
                            | 
0x07d: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x087: 749100000000000000   | 	jne Mod2_1
0x090: 90                   | 	ret
0x091:                      | Mod2_1:
0x091: 62aa                 | 	andq %r10, %r10
0x093: 71a600000000000000   | 	jle Mod4_1
0x09c: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x0a6:                      | Mod4_1:
0x0a6: 30f90200000000000000 | 	irmovq $2, %r9
0x0b0: 6229                 | 	andq %rdx, %r9 # len is 0, 1 mod 4 ?
0x0b2: 733501000000000000   | 	je Mod8_1
                            | 
0x0bb: 50a70000000000000000 | 	mrmovq (%rdi), %r10 # read val from src
0x0c5: 50970800000000000000 | 	mrmovq $8(%rdi), %r9 # read val from src
0x0cf: 40a60000000000000000 | 	rmmovq %r10, (%rsi) # store it to dst
0x0d9: 40960800000000000000 | 	rmmovq %r9, $8(%rsi) # store it to dst
                            | 
0x0e3: 62aa                 | 	andq %r10, %r10
0x0e5: 71f800000000000000   | 	jle Mod4_2
0x0ee: c0f00100000000000000 | 	iaddq $1, %rax
0x0f8:                      | Mod4_2:
0x0f8: c0f71000000000000000 | 	iaddq $16, %rdi
0x102: c0f61000000000000000 | 	iaddq $16, %rsi
0x10c: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x116: 742001000000000000   | 	jne Mod4_3
0x11f: 90                   | 	ret
0x120:                      | Mod4_3:
0x120: 6299                 | 	andq %r9, %r9
0x122: 713501000000000000   | 	jle Mod8_1
0x12b: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x135:                      | Mod8_1:
0x135: 30f90400000000000000 | 	irmovq $4, %r9
0x13f: 6229                 | 	andq %rdx, %r9 # len is 0, 1, 2, 3 mod 8
0x141: 737203000000000000   | 	je Test
                            | 
0x14a: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x154: 50970800000000000000 | 	mrmovq $8(%rdi), %r9
0x15e: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x168: 40960800000000000000 | 	rmmovq %r9, $8(%rsi)
                            | 
0x172: 62aa                 | 	andq %r10, %r10
0x174: 718701000000000000   | 	jle Mod8_2
0x17d: c0f00100000000000000 | 	iaddq $1, %rax
0x187:                      | Mod8_2:
0x187: 6299                 | 	andq %r9, %r9
0x189: 719c01000000000000   | 	jle Mod8_3
0x192: c0f00100000000000000 | 	iaddq $1, %rax
0x19c:                      | Mod8_3:
0x19c: 50a71000000000000000 | 	mrmovq $16(%rdi), %r10
0x1a6: 50971800000000000000 | 	mrmovq $24(%rdi), %r9
0x1b0: 40a61000000000000000 | 	rmmovq %r10, $16(%rsi)
0x1ba: 40961800000000000000 | 	rmmovq %r9, $24(%rsi)
                            | 
0x1c4: 62aa                 | 	andq %r10, %r10
0x1c6: 71d901000000000000   | 	jle Mod8_4
0x1cf: c0f00100000000000000 | 	iaddq $1, %rax
0x1d9:                      | Mod8_4:
0x1d9: c0f72000000000000000 | 	iaddq $32, %rdi
0x1e3: c0f62000000000000000 | 	iaddq $32, %rsi
0x1ed: c0f2fcffffffffffffff | 	iaddq $-4, %rdx
0x1f7: 6299                 | 	andq %r9, %r9
0x1f9: 717203000000000000   | 	jle Test
0x202: c0f00100000000000000 | 	iaddq $1, %rax
0x20c: 747203000000000000   | 	jne Test
0x215: 90                   | 	ret
                            | 
                            | 
0x216:                      | L1:
0x216: 50a70000000000000000 | 	mrmovq (%rdi), %r10 # read val from src
0x220: 50970800000000000000 | 	mrmovq $8(%rdi), %r9 # read val from src
0x22a: 40a60000000000000000 | 	rmmovq %r10, (%rsi) # store it to dst
0x234: 40960800000000000000 | 	rmmovq %r9, $8(%rsi) # store it to dst
                            | 
0x23e: 62aa                 | 	andq %r10, %r10
0x240: 715302000000000000   | 	jle L2 
0x249: c0f00100000000000000 | 	iaddq $1, %rax
0x253:                      | L2:
0x253: 6299                 | 	andq %r9, %r9
0x255: 716802000000000000   | 	jle L3
0x25e: c0f00100000000000000 | 	iaddq $1, %rax
0x268:                      | L3:
0x268: 50a71000000000000000 | 	mrmovq $16(%rdi), %r10 # read val from src
0x272: 50971800000000000000 | 	mrmovq $24(%rdi), %r9 # read val from src
0x27c: 40a61000000000000000 | 	rmmovq %r10, $16(%rsi) # store it to dst
0x286: 40961800000000000000 | 	rmmovq %r9, $24(%rsi) # store it to dst
                            | 
0x290: 62aa                 | 	andq %r10, %r10
0x292: 71a502000000000000   | 	jle L4 
0x29b: c0f00100000000000000 | 	iaddq $1, %rax
0x2a5:                      | L4:
0x2a5: 6299                 | 	andq %r9, %r9
0x2a7: 71ba02000000000000   | 	jle L5
0x2b0: c0f00100000000000000 | 	iaddq $1, %rax
0x2ba:                      | L5:
0x2ba: 50a72000000000000000 | 	mrmovq $32(%rdi), %r10 # read val from src
0x2c4: 50972800000000000000 | 	mrmovq $40(%rdi), %r9 # read val from src
0x2ce: 40a62000000000000000 | 	rmmovq %r10, $32(%rsi) # store it to dst
0x2d8: 40962800000000000000 | 	rmmovq %r9, $40(%rsi) # store it to dst
                            | 
0x2e2: 62aa                 | 	andq %r10, %r10
0x2e4: 71f702000000000000   | 	jle L6 
0x2ed: c0f00100000000000000 | 	iaddq $1, %rax
0x2f7:                      | L6:
0x2f7: 6299                 | 	andq %r9, %r9
0x2f9: 710c03000000000000   | 	jle L7
0x302: c0f00100000000000000 | 	iaddq $1, %rax
0x30c:                      | L7:
0x30c: 50a73000000000000000 | 	mrmovq $48(%rdi), %r10 # read val from src
0x316: 50973800000000000000 | 	mrmovq $56(%rdi), %r9 # read val from src
0x320: 40a63000000000000000 | 	rmmovq %r10, $48(%rsi) # store it to dst
0x32a: 40963800000000000000 | 	rmmovq %r9, $56(%rsi) # store it to dst
                            | 
0x334: 62aa                 | 	andq %r10, %r10
0x336: 714903000000000000   | 	jle L8 
0x33f: c0f00100000000000000 | 	iaddq $1, %rax
0x349:                      | L8:
0x349: c0f74000000000000000 | 	iaddq $64, %rdi
0x353: c0f64000000000000000 | 	iaddq $64, %rsi
0x35d: 6299                 | 	andq %r9, %r9
0x35f: 717203000000000000   | 	jle Test
0x368: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x372:                      | Test:
0x372: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx # (len-8) >= 0 ?
0x37c: 751602000000000000   | 	jge L1
                            | #################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x385:                      | Done:
0x385: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x386:                      | End:
                            | #/* $end ncopy-ys */
0x386:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x388:                      | 	.align 8
0x388:                      | src:
0x388: ffffffffffffffff     | 	.quad -1
0x390: 0200000000000000     | 	.quad 2
0x398: 0300000000000000     | 	.quad 3
0x3a0: fcffffffffffffff     | 	.quad -4
0x3a8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3b0:                      | 	.align 16
0x3b0:                      | Predest:
0x3b0: fadebc0000000000     | 	.quad 0xbcdefa
0x3b8:                      | dest:
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8:                      | Postdest:
0x3d8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x3e0:                      | .align 8
                            | # Run time stack
0x3e0: 0000000000000000     | 	.quad 0
0x3e8: 0000000000000000     | 	.quad 0
0x3f0: 0000000000000000     | 	.quad 0
0x3f8: 0000000000000000     | 	.quad 0
0x400: 0000000000000000     | 	.quad 0
0x408: 0000000000000000     | 	.quad 0
0x410: 0000000000000000     | 	.quad 0
0x418: 0000000000000000     | 	.quad 0
0x420: 0000000000000000     | 	.quad 0
0x428: 0000000000000000     | 	.quad 0
0x430: 0000000000000000     | 	.quad 0
0x438: 0000000000000000     | 	.quad 0
0x440: 0000000000000000     | 	.quad 0
0x448: 0000000000000000     | 	.quad 0
0x450: 0000000000000000     | 	.quad 0
0x458: 0000000000000000     | 	.quad 0
                            | 
0x460:                      | Stack:
