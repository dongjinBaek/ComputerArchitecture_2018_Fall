                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f48806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f60804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7f801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # 2017-12735 Baek Dong Jin
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax, %rax # count = 0;
                            | 
0x034:                      | Mod2:
0x034: 30f90100000000000000 | 	irmovq $1, %r9
0x03e: 6229                 | 	andq %rdx, %r9 # len is Even ?
0x040: 739900000000000000   | 	je Mod4
                            | 
0x049: 50a70000000000000000 | 	mrmovq (%rdi), %r10 # read val from src
0x053: c0f70800000000000000 | 	iaddq $8, %rdi
0x05d: 40a60000000000000000 | 	rmmovq %r10, (%rsi) # store it to dst
0x067: c0f60800000000000000 | 	iaddq $8, %rsi
                            | 
0x071: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x07b: 62aa                 | 	andq %r10, %r10
0x07d: 719900000000000000   | 	jle Mod4
0x086: c0f00100000000000000 | 	iaddq $1, %rax
0x090: 709900000000000000   | 	jmp Mod4
                            | 
0x099:                      | Mod4:
0x099: 30f90200000000000000 | 	irmovq $2, %r9
0x0a3: 6229                 | 	andq %rdx, %r9 # len is 0, 1 mod 4 ?
0x0a5: 73df01000000000000   | 	je Test
                            | 
0x0ae: 50a70000000000000000 | 	mrmovq (%rdi), %r10 # read val from src
0x0b8: c0f71000000000000000 | 	iaddq $16, %rdi
0x0c2: 40a60000000000000000 | 	rmmovq %r10, (%rsi) # store it to dst
                            | 
0x0cc: 62aa                 | 	andq %r10, %r10
0x0ce: 71e100000000000000   | 	jle Mod4Second
0x0d7: c0f00100000000000000 | 	iaddq $1, %rax
0x0e1:                      | Mod4Second:
0x0e1: 50a7f8ffffffffffffff | 	mrmovq $-8(%rdi), %r10 # read val from src
0x0eb: c0f61000000000000000 | 	iaddq $16, %rsi
0x0f5: 40a6f8ffffffffffffff | 	rmmovq %r10, $-8(%rsi) # store it to dst
                            | 
0x0ff: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x109: 62aa                 | 	andq %r10, %r10
0x10b: 71df01000000000000   | 	jle Test
0x114: c0f00100000000000000 | 	iaddq $1, %rax
0x11e: 70df01000000000000   | 	jmp Test
                            | 
0x127:                      | L1:
0x127: 50a70000000000000000 | 	mrmovq (%rdi), %r10 # read val from src
0x131: c0f72000000000000000 | 	iaddq $32, %rdi
0x13b: 40a60000000000000000 | 	rmmovq %r10, (%rsi) # store it to dst
                            | 
0x145: 62aa                 | 	andq %r10, %r10	
0x147: 715a01000000000000   | 	jle L2 
0x150: c0f00100000000000000 | 	iaddq $1, %rax
0x15a:                      | L2:
0x15a: 50a7e8ffffffffffffff | 	mrmovq $-24(%rdi), %r10 # read val from src
0x164: c0f62000000000000000 | 	iaddq $32, %rsi
0x16e: 40a6e8ffffffffffffff | 	rmmovq %r10, $-24(%rsi) # store it to dst
                            | 
0x178: 62aa                 | 	andq %r10, %r10
0x17a: 718d01000000000000   | 	jle L3
0x183: c0f00100000000000000 | 	iaddq $1, %rax
0x18d:                      | L3:
0x18d: 50a7f0ffffffffffffff | 	mrmovq $-16(%rdi), %r10 # read val from src
0x197: 5097f8ffffffffffffff | 	mrmovq $-8(%rdi), %r9 # read val from src
0x1a1: 40a6f0ffffffffffffff | 	rmmovq %r10, $-16(%rsi) # store it to dst
0x1ab: 4096f8ffffffffffffff | 	rmmovq %r9, $-8(%rsi) # store it to dst
                            | 
0x1b5: 62aa                 | 	andq %r10, %r10
0x1b7: 71ca01000000000000   | 	jle L4 
0x1c0: c0f00100000000000000 | 	iaddq $1, %rax
0x1ca:                      | L4:
0x1ca: 6299                 | 	andq %r9, %r9
0x1cc: 71df01000000000000   | 	jle Test
0x1d5: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x1df:                      | Test:
0x1df: c0f2fcffffffffffffff | 	iaddq $-4, %rdx # (len-4) >= 0 ?
0x1e9: 752701000000000000   | 	jge L1
                            | #################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1f2:                      | Done:
0x1f2: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1f3:                      | End:
                            | #/* $end ncopy-ys */
0x1f3:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1f8:                      | 	.align 8
0x1f8:                      | src:
0x1f8: 0100000000000000     | 	.quad 1
0x200: feffffffffffffff     | 	.quad -2
0x208: fdffffffffffffff     | 	.quad -3
0x210: fcffffffffffffff     | 	.quad -4
0x218: 0500000000000000     | 	.quad 5
0x220: 0600000000000000     | 	.quad 6
0x228: f9ffffffffffffff     | 	.quad -7
0x230: 0800000000000000     | 	.quad 8
0x238: 0900000000000000     | 	.quad 9
0x240: f6ffffffffffffff     | 	.quad -10
0x248: f5ffffffffffffff     | 	.quad -11
0x250: f4ffffffffffffff     | 	.quad -12
0x258: f3ffffffffffffff     | 	.quad -13
0x260: 0e00000000000000     | 	.quad 14
0x268: f1ffffffffffffff     | 	.quad -15
0x270: f0ffffffffffffff     | 	.quad -16
0x278: efffffffffffffff     | 	.quad -17
0x280: 1200000000000000     | 	.quad 18
0x288: 1300000000000000     | 	.quad 19
0x290: ecffffffffffffff     | 	.quad -20
0x298: 1500000000000000     | 	.quad 21
0x2a0: 1600000000000000     | 	.quad 22
0x2a8: e9ffffffffffffff     | 	.quad -23
0x2b0: 1800000000000000     | 	.quad 24
0x2b8: e7ffffffffffffff     | 	.quad -25
0x2c0: e6ffffffffffffff     | 	.quad -26
0x2c8: e5ffffffffffffff     | 	.quad -27
0x2d0: e4ffffffffffffff     | 	.quad -28
0x2d8: 1d00000000000000     | 	.quad 29
0x2e0: e2ffffffffffffff     | 	.quad -30
0x2e8: 1f00000000000000     | 	.quad 31
0x2f0: 2000000000000000     | 	.quad 32
0x2f8: dfffffffffffffff     | 	.quad -33
0x300: deffffffffffffff     | 	.quad -34
0x308: 2300000000000000     | 	.quad 35
0x310: 2400000000000000     | 	.quad 36
0x318: dbffffffffffffff     | 	.quad -37
0x320: daffffffffffffff     | 	.quad -38
0x328: 2700000000000000     | 	.quad 39
0x330: 2800000000000000     | 	.quad 40
0x338: 2900000000000000     | 	.quad 41
0x340: 2a00000000000000     | 	.quad 42
0x348: 2b00000000000000     | 	.quad 43
0x350: d4ffffffffffffff     | 	.quad -44
0x358: d3ffffffffffffff     | 	.quad -45
0x360: 2e00000000000000     | 	.quad 46
0x368: d1ffffffffffffff     | 	.quad -47
0x370: d0ffffffffffffff     | 	.quad -48
0x378: 3100000000000000     | 	.quad 49
0x380: 3200000000000000     | 	.quad 50
0x388: cdffffffffffffff     | 	.quad -51
0x390: ccffffffffffffff     | 	.quad -52
0x398: cbffffffffffffff     | 	.quad -53
0x3a0: 3600000000000000     | 	.quad 54
0x3a8: c9ffffffffffffff     | 	.quad -55
0x3b0: 3800000000000000     | 	.quad 56
0x3b8: c7ffffffffffffff     | 	.quad -57
0x3c0: c6ffffffffffffff     | 	.quad -58
0x3c8: 3b00000000000000     | 	.quad 59
0x3d0: 3c00000000000000     | 	.quad 60
0x3d8: 3d00000000000000     | 	.quad 61
0x3e0: 3e00000000000000     | 	.quad 62
0x3e8: 3f00000000000000     | 	.quad 63
0x3f0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x400:                      | 	.align 16
0x400:                      | Predest:
0x400: fadebc0000000000     | 	.quad 0xbcdefa
0x408:                      | dest:
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600:                      | Postdest:
0x600: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x608:                      | .align 8
                            | # Run time stack
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
0x620: 0000000000000000     | 	.quad 0
0x628: 0000000000000000     | 	.quad 0
0x630: 0000000000000000     | 	.quad 0
0x638: 0000000000000000     | 	.quad 0
0x640: 0000000000000000     | 	.quad 0
0x648: 0000000000000000     | 	.quad 0
0x650: 0000000000000000     | 	.quad 0
0x658: 0000000000000000     | 	.quad 0
0x660: 0000000000000000     | 	.quad 0
0x668: 0000000000000000     | 	.quad 0
0x670: 0000000000000000     | 	.quad 0
0x678: 0000000000000000     | 	.quad 0
0x680: 0000000000000000     | 	.quad 0
                            | 
0x688:                      | Stack:
