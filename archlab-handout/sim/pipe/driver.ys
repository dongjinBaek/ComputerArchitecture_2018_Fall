#######################################################################
# Test for copying block of size 64;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $64, %rdx		# src and dst have 64 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# 2017-12735 Baek Dong Jin
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
	# Loop header
	irmovq $1, %r9
	xorq %rax, %rax # count = 0;

Mod2:
	andq %rdx, %r9 # len is Even ?
	je Mod4

	mrmovq (%rdi), %r10 # read val from src
	iaddq $8, %rdi
	rmmovq %r10, (%rsi) # store it to dst
	iaddq $8, %rsi

	iaddq $-1, %rdx
	andq %r10, %r10
	jle Mod4
	iaddq $1, %rax
	jmp Mod4

Mod4:
	irmovq $2, %r9
	andq %rdx, %r9 # len is 0, 1 mod 4 ?
	je Test

	mrmovq (%rdi), %r10 # read val from src
	iaddq $16, %rdi
	rmmovq %r10, (%rsi) # store it to dst

	andq %r10, %r10
	jle Mod4Second
	iaddq $1, %rax
Mod4Second:
	mrmovq $-8(%rdi), %r10 # read val from src
	iaddq $16, %rsi
	rmmovq %r10, $-8(%rsi) # store it to dst

	iaddq $-2, %rdx
	andq %r10, %r10
	jle Test
	iaddq $1, %rax
	jmp Test

L1:
	mrmovq (%rdi), %r10 # read val from src
	iaddq $32, %rdi
	rmmovq %r10, (%rsi) # store it to dst

	andq %r10, %r10	
	jle L2 
	iaddq $1, %rax
L2:
	mrmovq $-24(%rdi), %r10 # read val from src
	iaddq $32, %rsi
	rmmovq %r10, $-24(%rsi) # store it to dst

	andq %r10, %r10
	jle L3
	iaddq $1, %rax
L3:
	mrmovq $-16(%rdi), %r10 # read val from src
	rmmovq %r10, $-16(%rsi) # store it to dst

	andq %r10, %r10	
	jle L4 
	iaddq $1, %rax
L4:
	mrmovq $-8(%rdi), %r10 # read val from src
	rmmovq %r10, $-8(%rsi) # store it to dst

	andq %r10, %r10
	jle Test
	iaddq $1, %rax

Test:
	iaddq $-4, %rdx # (len-2) >= 0 ?
	jge L1
#################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 32.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $32,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $64,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad -2
	.quad 3
	.quad 4
	.quad 5
	.quad 6
	.quad 7
	.quad -8
	.quad -9
	.quad -10
	.quad -11
	.quad -12
	.quad -13
	.quad 14
	.quad -15
	.quad 16
	.quad 17
	.quad -18
	.quad 19
	.quad -20
	.quad 21
	.quad -22
	.quad -23
	.quad -24
	.quad 25
	.quad 26
	.quad -27
	.quad -28
	.quad -29
	.quad 30
	.quad 31
	.quad 32
	.quad -33
	.quad 34
	.quad 35
	.quad -36
	.quad 37
	.quad -38
	.quad -39
	.quad -40
	.quad 41
	.quad 42
	.quad 43
	.quad 44
	.quad 45
	.quad -46
	.quad 47
	.quad -48
	.quad 49
	.quad -50
	.quad -51
	.quad -52
	.quad 53
	.quad -54
	.quad -55
	.quad 56
	.quad 57
	.quad -58
	.quad 59
	.quad -60
	.quad -61
	.quad -62
	.quad 63
	.quad 64
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
