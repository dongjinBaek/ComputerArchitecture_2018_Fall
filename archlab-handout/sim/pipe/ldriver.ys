#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# 2017-12735 Baek Dong Jin
#
# Describe how and why you modified the baseline code.
# 1. irmovq + addq --> iaddq
# 2. handle load/use hazard by inserting instruction between copying data
# 3. loop unrolling with k = 8
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
	# Loop header
	xorq %rax, %rax
	iaddq $-8, %rdx
	jl Has4_Small


L1:
	mrmovq (%rdi), %r10 # read val from src
	mrmovq $8(%rdi), %r9 # read val from src
	rmmovq %r10, (%rsi) # store it to dst
	rmmovq %r9, $8(%rsi) # store it to dst

	andq %r10, %r10
	jle L2 
	iaddq $1, %rax
L2:
	andq %r9, %r9
	jle L3
	iaddq $1, %rax
L3:
	mrmovq $16(%rdi), %r10 # read val from src
	mrmovq $24(%rdi), %r9 # read val from src
	rmmovq %r10, $16(%rsi) # store it to dst
	rmmovq %r9, $24(%rsi) # store it to dst

	andq %r10, %r10
	jle L4 
	iaddq $1, %rax
L4:
	andq %r9, %r9
	jle L5
	iaddq $1, %rax
L5:
	mrmovq $32(%rdi), %r10 # read val from src
	mrmovq $40(%rdi), %r9 # read val from src
	rmmovq %r10, $32(%rsi) # store it to dst
	rmmovq %r9, $40(%rsi) # store it to dst

	andq %r10, %r10
	jle L6 
	iaddq $1, %rax
L6:
	andq %r9, %r9
	jle L7
	iaddq $1, %rax
L7:
	mrmovq $48(%rdi), %r10 # read val from src
	mrmovq $56(%rdi), %r9 # read val from src
	rmmovq %r10, $48(%rsi) # store it to dst
	rmmovq %r9, $56(%rsi) # store it to dst

	andq %r10, %r10
	jle L8 
	iaddq $1, %rax
L8:
	iaddq $64, %rdi
	iaddq $64, %rsi
	andq %r9, %r9
	jle Test 
	iaddq $1, %rax
Test:
	iaddq $-8, %rdx # (len-8) >= 0 ?
	jge L1

Has4_Small:
	iaddq $8, %rdx

Has4:
	iaddq $-4, %rdx
	jl Has2_Small

	mrmovq (%rdi), %r10
	mrmovq $8(%rdi), %r9
	rmmovq %r10, (%rsi)
	rmmovq %r9, $8(%rsi)

	andq %r10, %r10
	jle S1
	iaddq $1, %rax
S1:
	andq %r9, %r9
	jle S2
	iaddq $1, %rax
S2:
	mrmovq $16(%rdi), %r10
	mrmovq $24(%rdi), %r9
	rmmovq %r10, $16(%rsi)
	rmmovq %r9, $24(%rsi)

	andq %r10, %r10
	jle S3
	iaddq $1, %rax
S3:
	iaddq $32, %rdi
	iaddq $32, %rsi
	andq %r9, %r9
	jle Has2
	iaddq $1, %rax
	jmp Has2

Has2_Small:
	iaddq $4, %rdx
Has2:
	iaddq $-2, %rdx
	jl Has1_Small

	mrmovq (%rdi), %r10 # read val from src
	mrmovq $8(%rdi), %r9 # read val from src
	rmmovq %r10, (%rsi) # store it to dst
	rmmovq %r9, $8(%rsi) # store it to dst

	andq %r10, %r10
	jle S4
	iaddq $1, %rax
S4:
	iaddq $16, %rdi
	iaddq $16, %rsi

	andq %r9, %r9
	jle Has1
	iaddq $1, %rax
	jmp Has1
	
Has1_Small:
	iaddq $2, %rdx

Has1:
	iaddq $-1, %rdx
	jl Done

	mrmovq (%rdi), %r10 # read val from src
	rmmovq %r10, (%rsi) # store it to dst

	andq %r10, %r10
	jle Done
	iaddq $1, %rax



#################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad 3
	.quad -4
	.quad -5
	.quad 6
	.quad 7
	.quad -8
	.quad -9
	.quad 10
	.quad -11
	.quad 12
	.quad 13
	.quad -14
	.quad -15
	.quad -16
	.quad 17
	.quad 18
	.quad 19
	.quad 20
	.quad 21
	.quad 22
	.quad -23
	.quad 24
	.quad -25
	.quad -26
	.quad 27
	.quad -28
	.quad 29
	.quad 30
	.quad 31
	.quad -32
	.quad -33
	.quad 34
	.quad 35
	.quad 36
	.quad 37
	.quad -38
	.quad 39
	.quad 40
	.quad -41
	.quad 42
	.quad 43
	.quad -44
	.quad 45
	.quad 46
	.quad -47
	.quad 48
	.quad 49
	.quad -50
	.quad -51
	.quad 52
	.quad 53
	.quad -54
	.quad -55
	.quad -56
	.quad -57
	.quad -58
	.quad -59
	.quad -60
	.quad -61
	.quad -62
	.quad -63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
