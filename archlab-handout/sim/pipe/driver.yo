                            | #######################################################################
                            | # Test for copying block of size 64;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f40008000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f24000000000000000 | 	irmovq $64, %rdx		# src and dst have 64 elements
0x014: 30f67805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f76803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 80fc01000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # 2017-12735 Baek Dong Jin
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | 	# Loop header
0x03b: 30f90100000000000000 | 	irmovq $1, %r9
0x045: 6300                 | 	xorq %rax, %rax # count = 0;
                            | 
0x047:                      | Mod2:
0x047: 6229                 | 	andq %rdx, %r9 # len is Even ?
0x049: 73a200000000000000   | 	je Mod4
                            | 
0x052: 50a70000000000000000 | 	mrmovq (%rdi), %r10 # read val from src
0x05c: c0f70800000000000000 | 	iaddq $8, %rdi
0x066: 40a60000000000000000 | 	rmmovq %r10, (%rsi) # store it to dst
0x070: c0f60800000000000000 | 	iaddq $8, %rsi
                            | 
0x07a: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x084: 62aa                 | 	andq %r10, %r10
0x086: 71a200000000000000   | 	jle Mod4
0x08f: c0f00100000000000000 | 	iaddq $1, %rax
0x099: 70a200000000000000   | 	jmp Mod4
                            | 
0x0a2:                      | Mod4:
0x0a2: 30f90200000000000000 | 	irmovq $2, %r9
0x0ac: 6229                 | 	andq %rdx, %r9 # len is 0, 1 mod 4 ?
0x0ae: 73e801000000000000   | 	je Test
                            | 
0x0b7: 50a70000000000000000 | 	mrmovq (%rdi), %r10 # read val from src
0x0c1: c0f71000000000000000 | 	iaddq $16, %rdi
0x0cb: 40a60000000000000000 | 	rmmovq %r10, (%rsi) # store it to dst
                            | 
0x0d5: 62aa                 | 	andq %r10, %r10
0x0d7: 71ea00000000000000   | 	jle Mod4Second
0x0e0: c0f00100000000000000 | 	iaddq $1, %rax
0x0ea:                      | Mod4Second:
0x0ea: 50a7f8ffffffffffffff | 	mrmovq $-8(%rdi), %r10 # read val from src
0x0f4: c0f61000000000000000 | 	iaddq $16, %rsi
0x0fe: 40a6f8ffffffffffffff | 	rmmovq %r10, $-8(%rsi) # store it to dst
                            | 
0x108: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x112: 62aa                 | 	andq %r10, %r10
0x114: 71e801000000000000   | 	jle Test
0x11d: c0f00100000000000000 | 	iaddq $1, %rax
0x127: 70e801000000000000   | 	jmp Test
                            | 
0x130:                      | L1:
0x130: 50a70000000000000000 | 	mrmovq (%rdi), %r10 # read val from src
0x13a: c0f72000000000000000 | 	iaddq $32, %rdi
0x144: 40a60000000000000000 | 	rmmovq %r10, (%rsi) # store it to dst
                            | 
0x14e: 62aa                 | 	andq %r10, %r10	
0x150: 716301000000000000   | 	jle L2 
0x159: c0f00100000000000000 | 	iaddq $1, %rax
0x163:                      | L2:
0x163: 50a7e8ffffffffffffff | 	mrmovq $-24(%rdi), %r10 # read val from src
0x16d: c0f62000000000000000 | 	iaddq $32, %rsi
0x177: 40a6e8ffffffffffffff | 	rmmovq %r10, $-24(%rsi) # store it to dst
                            | 
0x181: 62aa                 | 	andq %r10, %r10
0x183: 719601000000000000   | 	jle L3
0x18c: c0f00100000000000000 | 	iaddq $1, %rax
0x196:                      | L3:
0x196: 50a7f0ffffffffffffff | 	mrmovq $-16(%rdi), %r10 # read val from src
0x1a0: 40a6f0ffffffffffffff | 	rmmovq %r10, $-16(%rsi) # store it to dst
                            | 
0x1aa: 62aa                 | 	andq %r10, %r10	
0x1ac: 71bf01000000000000   | 	jle L4 
0x1b5: c0f00100000000000000 | 	iaddq $1, %rax
0x1bf:                      | L4:
0x1bf: 50a7f8ffffffffffffff | 	mrmovq $-8(%rdi), %r10 # read val from src
0x1c9: 40a6f8ffffffffffffff | 	rmmovq %r10, $-8(%rsi) # store it to dst
                            | 
0x1d3: 62aa                 | 	andq %r10, %r10
0x1d5: 71e801000000000000   | 	jle Test
0x1de: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x1e8:                      | Test:
0x1e8: c0f2fcffffffffffffff | 	iaddq $-4, %rdx # (len-2) >= 0 ?
0x1f2: 753001000000000000   | 	jge L1
                            | #################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1fb:                      | Done:
0x1fb: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1fc:                      | End:
                            | #/* $end ncopy-ys */
0x1fc:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 32.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x1fc:                      | check:
                            | 	# Return value test
0x1fc: 30fa2000000000000000 | 	irmovq $32,%r10
0x206: 61a0                 | 	subq %r10,%rax
0x208: 732402000000000000   | 	je checkb
0x211: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x21b: 706203000000000000   | 	jmp cdone
0x224:                      | checkb:
                            | 	# Code length check
0x224: 30f0fc01000000000000 | 	irmovq EndFun,%rax
0x22e: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x238: 6120                 | 	subq %rdx,%rax
0x23a: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x244: 6102                 | 	subq %rax,%rdx
0x246: 756202000000000000   | 	jge checkm
0x24f: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x259: 706203000000000000   | 	jmp cdone
0x262:                      | checkm:
0x262: 30f27805000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x26c: 30f36803000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x276: 30f74000000000000000 | 	irmovq $64,%rdi  # Count
0x280: 6277                 | 	andq %rdi,%rdi
0x282: 73e002000000000000   | 	je checkpre         # Skip check if count = 0
0x28b:                      | mcloop:
0x28b: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x295: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x29f: 6160                 | 	subq %rsi,%rax
0x2a1: 73bd02000000000000   | 	je  mok
0x2aa: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x2b4: 706203000000000000   | 	jmp cdone
0x2bd:                      | mok:
0x2bd: 30f00800000000000000 | 	irmovq $8,%rax
0x2c7: 6002                 | 	addq %rax,%rdx	  # dest ++
0x2c9: 6003                 | 	addq %rax,%rbx    # src++
0x2cb: 30f00100000000000000 | 	irmovq $1,%rax
0x2d5: 6107                 | 	subq %rax,%rdi    # cnt--
0x2d7: 768b02000000000000   | 	jg mcloop
0x2e0:                      | checkpre:
                            | 	# Check for corruption
0x2e0: 30f27005000000000000 | 	irmovq Predest,%rdx
0x2ea: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x2f4: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x2fe: 6120                 | 	subq %rdx,%rax
0x300: 731c03000000000000   | 	je checkpost
0x309: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x313: 706203000000000000   | 	jmp cdone
0x31c:                      | checkpost:
                            | 	# Check for corruption
0x31c: 30f27807000000000000 | 	irmovq Postdest,%rdx
0x326: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x330: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x33a: 6120                 | 	subq %rdx,%rax
0x33c: 735803000000000000   | 	je checkok
0x345: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x34f: 706203000000000000   | 	jmp cdone
0x358:                      | checkok:
                            | 	# Successful checks
0x358: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x362:                      | cdone:
0x362: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x368:                      | 	.align 8
0x368:                      | src:
0x368: 0100000000000000     | 	.quad 1
0x370: feffffffffffffff     | 	.quad -2
0x378: 0300000000000000     | 	.quad 3
0x380: 0400000000000000     | 	.quad 4
0x388: 0500000000000000     | 	.quad 5
0x390: 0600000000000000     | 	.quad 6
0x398: 0700000000000000     | 	.quad 7
0x3a0: f8ffffffffffffff     | 	.quad -8
0x3a8: f7ffffffffffffff     | 	.quad -9
0x3b0: f6ffffffffffffff     | 	.quad -10
0x3b8: f5ffffffffffffff     | 	.quad -11
0x3c0: f4ffffffffffffff     | 	.quad -12
0x3c8: f3ffffffffffffff     | 	.quad -13
0x3d0: 0e00000000000000     | 	.quad 14
0x3d8: f1ffffffffffffff     | 	.quad -15
0x3e0: 1000000000000000     | 	.quad 16
0x3e8: 1100000000000000     | 	.quad 17
0x3f0: eeffffffffffffff     | 	.quad -18
0x3f8: 1300000000000000     | 	.quad 19
0x400: ecffffffffffffff     | 	.quad -20
0x408: 1500000000000000     | 	.quad 21
0x410: eaffffffffffffff     | 	.quad -22
0x418: e9ffffffffffffff     | 	.quad -23
0x420: e8ffffffffffffff     | 	.quad -24
0x428: 1900000000000000     | 	.quad 25
0x430: 1a00000000000000     | 	.quad 26
0x438: e5ffffffffffffff     | 	.quad -27
0x440: e4ffffffffffffff     | 	.quad -28
0x448: e3ffffffffffffff     | 	.quad -29
0x450: 1e00000000000000     | 	.quad 30
0x458: 1f00000000000000     | 	.quad 31
0x460: 2000000000000000     | 	.quad 32
0x468: dfffffffffffffff     | 	.quad -33
0x470: 2200000000000000     | 	.quad 34
0x478: 2300000000000000     | 	.quad 35
0x480: dcffffffffffffff     | 	.quad -36
0x488: 2500000000000000     | 	.quad 37
0x490: daffffffffffffff     | 	.quad -38
0x498: d9ffffffffffffff     | 	.quad -39
0x4a0: d8ffffffffffffff     | 	.quad -40
0x4a8: 2900000000000000     | 	.quad 41
0x4b0: 2a00000000000000     | 	.quad 42
0x4b8: 2b00000000000000     | 	.quad 43
0x4c0: 2c00000000000000     | 	.quad 44
0x4c8: 2d00000000000000     | 	.quad 45
0x4d0: d2ffffffffffffff     | 	.quad -46
0x4d8: 2f00000000000000     | 	.quad 47
0x4e0: d0ffffffffffffff     | 	.quad -48
0x4e8: 3100000000000000     | 	.quad 49
0x4f0: ceffffffffffffff     | 	.quad -50
0x4f8: cdffffffffffffff     | 	.quad -51
0x500: ccffffffffffffff     | 	.quad -52
0x508: 3500000000000000     | 	.quad 53
0x510: caffffffffffffff     | 	.quad -54
0x518: c9ffffffffffffff     | 	.quad -55
0x520: 3800000000000000     | 	.quad 56
0x528: 3900000000000000     | 	.quad 57
0x530: c6ffffffffffffff     | 	.quad -58
0x538: 3b00000000000000     | 	.quad 59
0x540: c4ffffffffffffff     | 	.quad -60
0x548: c3ffffffffffffff     | 	.quad -61
0x550: c2ffffffffffffff     | 	.quad -62
0x558: 3f00000000000000     | 	.quad 63
0x560: 4000000000000000     | 	.quad 64
0x568: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x570:                      | 	.align 16
0x570:                      | Predest:
0x570: fadebc0000000000     | 	.quad 0xbcdefa
0x578:                      | dest:
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778:                      | Postdest:
0x778: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x780:                      | .align 8
                            | # Run time stack
0x780: 0000000000000000     | 	.quad 0
0x788: 0000000000000000     | 	.quad 0
0x790: 0000000000000000     | 	.quad 0
0x798: 0000000000000000     | 	.quad 0
0x7a0: 0000000000000000     | 	.quad 0
0x7a8: 0000000000000000     | 	.quad 0
0x7b0: 0000000000000000     | 	.quad 0
0x7b8: 0000000000000000     | 	.quad 0
0x7c0: 0000000000000000     | 	.quad 0
0x7c8: 0000000000000000     | 	.quad 0
0x7d0: 0000000000000000     | 	.quad 0
0x7d8: 0000000000000000     | 	.quad 0
0x7e0: 0000000000000000     | 	.quad 0
0x7e8: 0000000000000000     | 	.quad 0
0x7f0: 0000000000000000     | 	.quad 0
0x7f8: 0000000000000000     | 	.quad 0
                            | 
0x800:                      | Stack:
